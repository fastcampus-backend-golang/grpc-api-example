// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: stock.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	// Unary API: Get list of available stock codes
	ListStocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockCodes, error)
	// Client Streaming: Enable/disable stock availability
	ToggleStocks(ctx context.Context, opts ...grpc.CallOption) (StockService_ToggleStocksClient, error)
	// Server Streaming: Get list of currently subscribed stocks
	ListSubscriptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockSubscription, error)
	// Bidirectional Streaming: Live stock price subscription
	LiveStock(ctx context.Context, opts ...grpc.CallOption) (StockService_LiveStockClient, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) ListStocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockCodes, error) {
	out := new(StockCodes)
	err := c.cc.Invoke(ctx, "/stock.StockService/ListStocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ToggleStocks(ctx context.Context, opts ...grpc.CallOption) (StockService_ToggleStocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[0], "/stock.StockService/ToggleStocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockServiceToggleStocksClient{stream}
	return x, nil
}

type StockService_ToggleStocksClient interface {
	Send(*StockSubscription) error
	CloseAndRecv() (*StockSubscription, error)
	grpc.ClientStream
}

type stockServiceToggleStocksClient struct {
	grpc.ClientStream
}

func (x *stockServiceToggleStocksClient) Send(m *StockSubscription) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stockServiceToggleStocksClient) CloseAndRecv() (*StockSubscription, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StockSubscription)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stockServiceClient) ListSubscriptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StockSubscription, error) {
	out := new(StockSubscription)
	err := c.cc.Invoke(ctx, "/stock.StockService/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) LiveStock(ctx context.Context, opts ...grpc.CallOption) (StockService_LiveStockClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[1], "/stock.StockService/LiveStock", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockServiceLiveStockClient{stream}
	return x, nil
}

type StockService_LiveStockClient interface {
	Send(*StockSubscription) error
	Recv() (*StockPrices, error)
	grpc.ClientStream
}

type stockServiceLiveStockClient struct {
	grpc.ClientStream
}

func (x *stockServiceLiveStockClient) Send(m *StockSubscription) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stockServiceLiveStockClient) Recv() (*StockPrices, error) {
	m := new(StockPrices)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility
type StockServiceServer interface {
	// Unary API: Get list of available stock codes
	ListStocks(context.Context, *emptypb.Empty) (*StockCodes, error)
	// Client Streaming: Enable/disable stock availability
	ToggleStocks(StockService_ToggleStocksServer) error
	// Server Streaming: Get list of currently subscribed stocks
	ListSubscriptions(context.Context, *emptypb.Empty) (*StockSubscription, error)
	// Bidirectional Streaming: Live stock price subscription
	LiveStock(StockService_LiveStockServer) error
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (UnimplementedStockServiceServer) ListStocks(context.Context, *emptypb.Empty) (*StockCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStocks not implemented")
}
func (UnimplementedStockServiceServer) ToggleStocks(StockService_ToggleStocksServer) error {
	return status.Errorf(codes.Unimplemented, "method ToggleStocks not implemented")
}
func (UnimplementedStockServiceServer) ListSubscriptions(context.Context, *emptypb.Empty) (*StockSubscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedStockServiceServer) LiveStock(StockService_LiveStockServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveStock not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_ListStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ListStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockService/ListStocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ListStocks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ToggleStocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StockServiceServer).ToggleStocks(&stockServiceToggleStocksServer{stream})
}

type StockService_ToggleStocksServer interface {
	SendAndClose(*StockSubscription) error
	Recv() (*StockSubscription, error)
	grpc.ServerStream
}

type stockServiceToggleStocksServer struct {
	grpc.ServerStream
}

func (x *stockServiceToggleStocksServer) SendAndClose(m *StockSubscription) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stockServiceToggleStocksServer) Recv() (*StockSubscription, error) {
	m := new(StockSubscription)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StockService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockService/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ListSubscriptions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_LiveStock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StockServiceServer).LiveStock(&stockServiceLiveStockServer{stream})
}

type StockService_LiveStockServer interface {
	Send(*StockPrices) error
	Recv() (*StockSubscription, error)
	grpc.ServerStream
}

type stockServiceLiveStockServer struct {
	grpc.ServerStream
}

func (x *stockServiceLiveStockServer) Send(m *StockPrices) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stockServiceLiveStockServer) Recv() (*StockSubscription, error) {
	m := new(StockSubscription)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStocks",
			Handler:    _StockService_ListStocks_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _StockService_ListSubscriptions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ToggleStocks",
			Handler:       _StockService_ToggleStocks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LiveStock",
			Handler:       _StockService_LiveStock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stock.proto",
}
